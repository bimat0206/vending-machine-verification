openapi: "3.0.1"
info:
  title: "Kootoro GenAI Vending Machine Verification API"
  description: "API for the Kootoro vending machine product verification solution using Amazon Bedrock's multimodal capabilities to verify product placement."
  version: "1.0.0"
  contact:
    name: "Kootoro Support"
    email: "support@kootoro.ai"

x-amazon-apigateway-cors:
  allowOrigins:
    - "${cors_allowed_origin}"
  allowCredentials: true
  allowMethods:
    - "DELETE"
    - "GET"
    - "HEAD"
    - "OPTIONS"
    - "PATCH"
    - "POST"
    - "PUT"
  allowHeaders:
    - "Content-Type"
    - "X-Amz-Date"
    - "Authorization"
    - "X-Api-Key"
    - "X-Amz-Security-Token"
    - "X-Amz-User-Agent"
  exposeHeaders:
    - "ETag"
  maxAge: 7200

paths:
  /api/v1/verifications/lookup:
    get:
      summary: "Lookup previous verification by checking image"
      description: "Retrieves historical verification results based on a checking image key."
      operationId: "lookupVerification"
      parameters:
        - name: "checkingImageUrl"
          in: "query"
          required: true
          schema:
            type: "string"
          description: "S3 key of the previous checking image"
        - name: "vendingMachineId"
          in: "query"
          required: false
          schema:
            type: "string"
          description: "Filter by vending machine ID"
        - name: "limit"
          in: "query"
          required: false
          schema:
            type: "integer"
            default: 1
          description: "Number of results (typically 1 for the most recent)"
        - name: "sortBy"
          in: "query"
          required: false
          schema:
            type: "string"
            default: "verificationAt:desc"
          description: "Sort order for results"
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:${region}:lambda:path/2015-03-31/functions/${stageVariables.verification_lookup_lambda}/invocations"
        payloadFormatVersion: "2.0"
        type: "aws_proxy"
        httpMethod: "POST"
      responses:
        '200':
          description: "Successful lookup"
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/VerificationSummary'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '400':
          description: "Missing or invalid checkingImageUrl"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: "No verification found for the provided checkingImageUrl"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - api_key: []
    options:
      summary: "CORS support for verifications lookup"
      x-amazon-apigateway-integration:
        type: "mock"
        requestTemplates:
          application/json: "{ \"statusCode\": 200 }"
        passthroughBehavior: "when_no_match"
        responses:
          default:
            statusCode: "200"
      responses:
        "200":
          description: "200 response"

  /api/v1/verifications:
    post:
      summary: "Initiate a new verification"
      operationId: "initiateVerification"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/LayoutVsCheckingVerificationRequest'
                - $ref: '#/components/schemas/PreviousVsCurrentVerificationRequest'
              discriminator:
                propertyName: verificationType
                mapping:
                  LAYOUT_VS_CHECKING: '#/components/schemas/LayoutVsCheckingVerificationRequest'
                  PREVIOUS_VS_CURRENT: '#/components/schemas/PreviousVsCurrentVerificationRequest'
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:${region}:lambda:path/2015-03-31/functions/${stageVariables.verification_initiate_lambda}/invocations"
        payloadFormatVersion: "2.0"
        type: "aws_proxy"
        httpMethod: "POST"
      responses:
        '202':
          description: "Verification initiated successfully"
          headers:
            Location:
              schema:
                type: string
              description: "URL to check verification status"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerificationInitiatedResponse'
        '400':
          description: "Missing required parameters or invalid input"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: "Specified image or layout not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: "Verification already in progress for these inputs"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - api_key: []
    get:
      summary: "List verification results"
      operationId: "listVerifications"
      parameters:
        - name: "vendingMachineId"
          in: "query"
          required: false
          schema:
            type: "string"
        - name: "verificationStatus"
          in: "query"
          required: false
          schema:
            type: "string"
            enum: ["CORRECT", "INCORRECT"]
        - name: "fromDate"
          in: "query"
          required: false
          schema:
            type: "string"
            format: "date-time"
        - name: "toDate"
          in: "query"
          required: false
          schema:
            type: "string"
            format: "date-time"
        - name: "limit"
          in: "query"
          required: false
          schema:
            type: "integer"
            default: 20
        - name: "offset"
          in: "query"
          required: false
          schema:
            type: "integer"
            default: 0
        - name: "sortBy"
          in: "query"
          required: false
          schema:
            type: "string"
            default: "verificationAt:desc"
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:${region}:lambda:path/2015-03-31/functions/${stageVariables.verification_list_lambda}/invocations"
        payloadFormatVersion: "2.0"
        type: "aws_proxy"
        httpMethod: "POST"
      responses:
        '200':
          description: "Successful retrieval"
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/VerificationListItem'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
      security:
        - api_key: []
    options:
      summary: "CORS support for verifications"
      x-amazon-apigateway-integration:
        type: "mock"
        requestTemplates:
          application/json: "{ \"statusCode\": 200 }"
        passthroughBehavior: "when_no_match"
        responses:
          default:
            statusCode: "200"
      responses:
        "200":
          description: "200 response"

  /api/v1/verifications/{verificationId}:
    get:
      summary: "Get verification details"
      operationId: "getVerification"
      parameters:
        - name: "verificationId"
          in: "path"
          required: true
          schema:
            type: "string"
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:${region}:lambda:path/2015-03-31/functions/${stageVariables.verification_get_lambda}/invocations"
        payloadFormatVersion: "2.0"
        type: "aws_proxy"
        httpMethod: "POST"
      responses:
        '200':
          description: "Verification completed"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerificationResult'
        '202':
          description: "Verification still processing"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerificationProcessing'
        '404':
          description: "Verification not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - api_key: []
    options:
      summary: "CORS support for verification by ID"
      parameters:
        - name: "verificationId"
          in: "path"
          required: true
          schema:
            type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        requestTemplates:
          application/json: "{ \"statusCode\": 200 }"
        passthroughBehavior: "when_no_match"
        responses:
          default:
            statusCode: "200"
      responses:
        "200":
          description: "200 response"

  /api/v1/verifications/{verificationId}/conversation:
    get:
      summary: "Get verification conversation history"
      operationId: "getVerificationConversation"
      parameters:
        - name: "verificationId"
          in: "path"
          required: true
          schema:
            type: "string"
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:${region}:lambda:path/2015-03-31/functions/${stageVariables.verification_conversation_lambda}/invocations"
        payloadFormatVersion: "2.0"
        type: "aws_proxy"
        httpMethod: "POST"
      responses:
        '200':
          description: "Successful retrieval"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversationHistory'
        '404':
          description: "Verification not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - api_key: []
    options:
      summary: "CORS support for verification conversation"
      parameters:
        - name: "verificationId"
          in: "path"
          required: true
          schema:
            type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        requestTemplates:
          application/json: "{ \"statusCode\": 200 }"
        passthroughBehavior: "when_no_match"
        responses:
          default:
            statusCode: "200"
      responses:
        "200":
          description: "200 response"

  /api/v1/health:
    get:
      summary: "System health check"
      operationId: "getHealthStatus"
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:${region}:lambda:path/2015-03-31/functions/${stageVariables.health_lambda}/invocations"
        payloadFormatVersion: "2.0"
        type: "aws_proxy"
        httpMethod: "POST"
      responses:
        '200':
          description: "System is healthy"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatus'
        '500':
          description: "System is unhealthy"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatus'
      security:
        - api_key: []
    options:
      summary: "CORS support for health check"
      x-amazon-apigateway-integration:
        type: "mock"
        requestTemplates:
          application/json: "{ \"statusCode\": 200 }"
        passthroughBehavior: "when_no_match"
        responses:
          default:
            statusCode: "200"
      responses:
        "200":
          description: "200 response"

  /api/v1/images/{key}/view:
    get:
      summary: "Get pre-signed URL for image"
      operationId: "getImagePresignedUrl"
      parameters:
        - name: "key"
          in: "path"
          required: true
          schema:
            type: "string"
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:${region}:lambda:path/2015-03-31/functions/${stageVariables.image_view_lambda}/invocations"
        payloadFormatVersion: "2.0"
        type: "aws_proxy"
        httpMethod: "POST"
      responses:
        '200':
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PresignedUrlResponse'
        '400':
          description: "Invalid key"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: "Image not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - api_key: []
    options:
      summary: "CORS support for image view"
      parameters:
        - name: "key"
          in: "path"
          required: true
          schema:
            type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        requestTemplates:
          application/json: "{ \"statusCode\": 200 }"
        passthroughBehavior: "when_no_match"
        responses:
          default:
            statusCode: "200"
      responses:
        "200":
          description: "200 response"

  /api/v1/images/browser/{path+}:
    get:
      summary: "Browse images in S3 bucket"
      operationId: "browseImages"
      parameters:
        - name: "path"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "bucketType"
          in: "query"
          required: true
          schema:
            type: "string"
            enum: ["reference", "checking"]
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:${region}:lambda:path/2015-03-31/functions/${stageVariables.image_browser_lambda}/invocations"
        payloadFormatVersion: "2.0"
        type: "aws_proxy"
        httpMethod: "POST"
      responses:
        '200':
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileBrowserResponse'
        '400':
          description: "Invalid parameters"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - api_key: []
    options:
      summary: "CORS support for image browser"
      parameters:
        - name: "path"
          in: "path"
          required: true
          schema:
            type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        requestTemplates:
          application/json: "{ \"statusCode\": 200 }"
        passthroughBehavior: "when_no_match"
        responses:
          default:
            statusCode: "200"
      responses:
        "200":
          description: "200 response"

components:
  securitySchemes:
    api_key:
      type: apiKey
      name: X-Api-Key
      in: header

  schemas:
    VerificationSummary:
      type: object
      properties:
        id: { type: string }
        status: { type: string }
        verificationAt: { type: string, format: date-time }
        vendingMachineId: { type: string }
        # ...add other fields as needed

    Pagination:
      type: object
      properties:
        limit: { type: integer }
        offset: { type: integer }
        total: { type: integer }

    Error:
      type: object
      properties:
        message: { type: string }
        code: { type: integer }

    VerificationListItem:
      type: object
      properties:
        id: { type: string }
        status: { type: string }
        verificationAt: { type: string, format: date-time }
        # ...add other fields as needed

    VerificationResult:
      type: object
      properties:
        id: { type: string }
        status: { type: string }
        details: { type: string }
        # ...add other fields as needed

    VerificationProcessing:
      type: object
      properties:
        status: { type: string }
        message: { type: string }

    ConversationHistory:
      type: object
      properties:
        messages:
          type: array
          items:
            type: object
            properties:
              sender: { type: string }
              content: { type: string }
              timestamp: { type: string, format: date-time }

    HealthStatus:
      type: object
      properties:
        healthy: { type: boolean }
        message: { type: string }

    PresignedUrlResponse:
      type: object
      properties:
        url: { type: string }
        expiresIn: { type: integer }

    FileBrowserResponse:
      type: object
      properties:
        files:
          type: array
          items:
            type: object
            properties:
              name: { type: string }
              url: { type: string }
              type: { type: string }
        folders:
          type: array
          items:
            type: string

    LayoutVsCheckingVerificationRequest:
      type: object
      properties:
        verificationType:
          type: string
          enum: [LAYOUT_VS_CHECKING]
        layoutImageUrl:
          type: string
        checkingImageUrl:
          type: string
        vendingMachineId:
          type: string

    PreviousVsCurrentVerificationRequest:
      type: object
      properties:
        verificationType:
          type: string
          enum: [PREVIOUS_VS_CURRENT]
        previousImageUrl:
          type: string
        checkingImageUrl:
          type: string
        vendingMachineId:
          type: string

    VerificationInitiatedResponse:
      type: object
      properties:
        verificationId: { type: string }
        status: { type: string }
        location: { type: string }

