variable "aws_region" {
  description = "The AWS region to deploy resources into"
  type        = string
}

variable "project_name" {
  description = "The name of the project"
  type        = string
}

variable "environment" {
  description = "The deployment environment (e.g., dev, test, prod)"
  type        = string
}

variable "resource_name_suffix" {
  description = "Optional suffix for resource names. If not provided, a random suffix will be generated."
  type        = string
  default     = ""
}

variable "additional_tags" {
  description = "Additional tags to apply to all resources"
  type        = map(string)
  default     = {}
}

# S3 Bucket Configuration
variable "s3_buckets" {
  description = "Configuration for S3 buckets"
  type = object({
    create_buckets = bool
    force_destroy  = bool
    lifecycle_rules = object({
      reference = list(object({
        id                                     = string
        enabled                                = bool
        prefix                                 = optional(string)
        expiration_days                        = optional(number)
        noncurrent_version_expiration_days     = optional(number)
        abort_incomplete_multipart_upload_days = optional(number)
      }))
      checking = list(object({
        id                                     = string
        enabled                                = bool
        prefix                                 = optional(string)
        expiration_days                        = optional(number)
        noncurrent_version_expiration_days     = optional(number)
        abort_incomplete_multipart_upload_days = optional(number)
      }))
      results = list(object({
        id                                     = string
        enabled                                = bool
        prefix                                 = optional(string)
        expiration_days                        = optional(number)
        noncurrent_version_expiration_days     = optional(number)
        abort_incomplete_multipart_upload_days = optional(number)
      }))
    })
  })
}

# DynamoDB Configuration
variable "dynamodb_tables" {
  description = "Configuration for DynamoDB tables"
  type = object({
    create_tables     = bool
    billing_mode      = string
    read_capacity     = optional(number)
    write_capacity    = optional(number)
    point_in_time_recovery = bool
  })
}

# ECR Configuration
variable "ecr" {
  description = "Configuration for ECR repositories"
  type = object({
    create_repositories = bool
    repositories = map(object({
      image_tag_mutability = optional(string, "MUTABLE")
      scan_on_push         = optional(bool, true)
      force_delete         = optional(bool, false)
      encryption_type      = optional(string, "AES256")
      kms_key              = optional(string, null)
      lifecycle_policy     = optional(string, null)
      repository_policy    = optional(string, null)
    }))
  })
}

# Lambda Configuration
variable "lambda_functions" {
  description = "Configuration for Lambda functions"
  type = object({
    create_functions = bool
    use_ecr          = bool
    image_tag        = string
    default_image_uri = string  # Used when not using ECR
    architectures    = list(string)
    memory_sizes     = map(number)
    timeouts         = map(number)
    log_retention_days = number
    s3_trigger_functions = list(string)
    eventbridge_trigger_functions = list(string)
  })
}

# API Gateway Configuration
variable "api_gateway" {
  description = "Configuration for API Gateway"
  type = object({
    create_api_gateway = bool
    stage_name         = string
    throttling_rate_limit  = number
    throttling_burst_limit = number
    cors_enabled       = bool
    metrics_enabled    = bool
  })
}

# Step Functions Configuration
variable "step_functions" {
  description = "Configuration for Step Functions"
  type = object({
    create_step_functions = bool
    log_level             = string
  })
}

# App Runner Configuration
variable "app_runner" {
  description = "Configuration for App Runner service"
  type = object({
    create_app_runner = bool
    image_uri         = string
    cpu               = number
    memory            = number
    environment_variables = map(string)
    auto_deployments_enabled = bool
  })
}

# Bedrock Configuration
variable "bedrock" {
  description = "Configuration for Amazon Bedrock"
  type = object({
    model_id         = string
    anthropic_version = string
    max_tokens       = number
    budget_tokens    = number
  })
}

# Monitoring Configuration
variable "monitoring" {
  description = "Configuration for CloudWatch monitoring"
  type = object({
    create_dashboard = bool
    log_retention_days = number
    alarm_email_endpoints = list(string)
  })
}